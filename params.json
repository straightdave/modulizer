{
  "name": "Modulizer",
  "tagline": "a ruby gem that modulize the web pages",
  "body": "# modulizer\r\nA ruby gem that helps modulize the web pages\r\n\r\n[![Build Status](https://travis-ci.org/straightdave/modulizer.svg?branch=master)](https://travis-ci.org/straightdave/modulizer)\r\n\r\n## basic idea\r\nSimilar to the concept of 'partials' in many backend frameworks (eg. sinatra, rails), while developing web applications, you may like to separate a complex web page into different components which, thus, could be more isolated, independent, easy-to-maintain and, the most important, reusable.\r\n\r\nHere we call such components **modules**.\r\nA module is just a single file which consists of mainly 3 parts of information:\r\n  - styling\r\n  - template\r\n  - scripting\r\n\r\nWe put all related thing together in one single file for a module to make it more maintainable and isolated. You can develop many modules and then use **modulizer** to build them.\r\nAfter building, the information would be compiled into one js file. Currently we need jQuery to make this work. So you need to load jQuery to the pages.\r\n\r\n## setup\r\n**Modulizer** is a ruby gem. You can install it via:\r\n```bash\r\n$> gem install modulizer\r\n```\r\n>Assume you have had ruby and gem installed. Newer the better.\r\n\r\n## get started\r\n\r\nSay you have a module file with the content:\r\n```html\r\n<!-- my_mod.html -->\r\n<style scoped>\r\nh2 {\r\n  color: red;\r\n}\r\n</style>\r\n\r\n<template>\r\n<h2>Hello, world!</h2>\r\n</template>\r\n\r\n<script>\r\n$(function(){\r\n  $('div#my_mod h2').on('click', function () {\r\n    alert('haha');\r\n  });\r\n});\r\n</script>\r\n```\r\n>The module files use '.html' as extend filename just for syntax highlighting of editors. You can use any kind of names.\r\n\r\nThe *style* element can have attribute 'scoped' to indicate the stylings are only working inside the modules. Behind the curtain it adds ```div#mod_name``` as prefix to the css selectors to limit styling effect.\r\n\r\nThen use modulizer to build:\r\n```bash\r\n$> modulizer -e my_mod.html -o builds/my_mod.js\r\n```\r\n\r\nThe module file would be compiled to a js file:\r\n```javascript\r\n/* auto-generated js for my-mod */\r\n(function (window, $) {\r\n  var style =\r\n  '<style>\\\r\n  div#my_mod h2 {\\\r\n    color: red;\\\r\n  }\\\r\n  </style>';\r\n\r\n  var template =\r\n  '<h2>Hello, world</h2>';\r\n\r\n  var script =\r\n  '<script>\\\r\n  (function(window, $) {\\\r\n    $(function(){\\\r\n      $(\\'div#my_mod h2\\').on(\\'click\\', function () {\\\r\n        alert(\\'haha\\');\\\r\n      });\\\r\n    });\\\r\n  })(window,jQuery);\\\r\n  </script>';\r\n\r\n  $(function() {\r\n    $(\"div#my_mod\").html(style + template + script);\r\n  });\r\n})(window, jQuery);\r\n```\r\n\r\nNow you can load the module and use it in your html page:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<meta charset=\"utf-8\">\r\n<title>The Title</title>\r\n<body>\r\n\r\n<div id=\"my-mod\"></div>\r\n\r\n<script src=\"js/jquery-3.1.0.min.js\"></script>\r\n<script src=\"modules/builds/my_mod.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n>You can compress the js files of modules\r\n\r\nVoila!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}